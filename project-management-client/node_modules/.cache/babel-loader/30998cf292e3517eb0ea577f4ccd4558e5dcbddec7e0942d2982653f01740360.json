{"ast":null,"code":"var _jsxFileName = \"/Users/chris/ironhack/module3/project-management-fullstack/project-management-client/src/context/auth.context.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = \"http://localhost:5005\";\nconst AuthContext = /*#__PURE__*/React.createContext();\nfunction AuthProviderWrapper(props) {\n  _s();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [user, setUser] = useState(null);\n\n  /* \n    Functions for handling the authentication status (isLoggedIn, isLoading, user)\n    will be added here later in the next step\n  */\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggedIn,\n      isLoading,\n      user\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n}\n_s(AuthProviderWrapper, \"s8wSgYPEufxLSIRwimHbUY9xO7g=\");\n_c = AuthProviderWrapper;\nexport { AuthProviderWrapper, AuthContext };\nvar _c;\n$RefreshReg$(_c, \"AuthProviderWrapper\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","API_URL","AuthContext","createContext","AuthProviderWrapper","props","_s","isLoggedIn","setIsLoggedIn","isLoading","setIsLoading","user","setUser","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/chris/ironhack/module3/project-management-fullstack/project-management-client/src/context/auth.context.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nconst API_URL = \"http://localhost:5005\";\n\nconst AuthContext = React.createContext();\n\nfunction AuthProviderWrapper(props) {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [user, setUser] = useState(null);\n  \n  /* \n    Functions for handling the authentication status (isLoggedIn, isLoading, user)\n    will be added here later in the next step\n  */\n\n  return (\n    <AuthContext.Provider value={{ isLoggedIn, isLoading, user }}>\n      {props.children}\n    </AuthContext.Provider>\n  )\n}\n\nexport { AuthProviderWrapper, AuthContext };\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAC1B,MAAMC,OAAO,GAAG,uBAAuB;AAEvC,MAAMC,WAAW,gBAAGP,KAAK,CAACQ,aAAa,EAAE;AAEzC,SAASC,mBAAmBA,CAACC,KAAK,EAAE;EAAAC,EAAA;EAClC,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACa,SAAS,EAAEC,YAAY,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACe,IAAI,EAAEC,OAAO,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;;EAEtC;AACF;AACA;AACA;;EAEE,oBACEI,OAAA,CAACE,WAAW,CAACW,QAAQ;IAACC,KAAK,EAAE;MAAEP,UAAU;MAAEE,SAAS;MAAEE;IAAK,CAAE;IAAAI,QAAA,EAC1DV,KAAK,CAACU;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACM;AAE3B;AAACb,EAAA,CAfQF,mBAAmB;AAAAgB,EAAA,GAAnBhB,mBAAmB;AAiB5B,SAASA,mBAAmB,EAAEF,WAAW;AAAG,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}